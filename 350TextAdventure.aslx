<!--Saved by Quest 5.5.5328.26617-->
<asl version="550">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="Bishop">
    <inherit name="theme_novella" />
    <gameid>36273a24-7575-4e61-8f7c-0bdf8d8b7fe9</gameid>
    <version>1.0</version>
    <firstpublished>2014</firstpublished>
    <showdescriptiononenter />
    <autodescription />
    <attr name="autodescription_youarein_useprefix" type="boolean">false</attr>
    <defaultbackground>Black</defaultbackground>
    <defaultforeground>Green</defaultforeground>
    <defaultlinkforeground>DarkGreen</defaultlinkforeground>
    <defaultfont>courier</defaultfont>
    <menuhoverforeground>White</menuhoverforeground>
    <cover>TempCoverArt.png</cover>
    <gridmap type="boolean">false</gridmap>
    <category>Sci-Fi</category>
    <feature_pictureframe />
    <attr name="autodescription_description" type="int">2</attr>
    <attr name="autodescription_youcansee" type="int">4</attr>
    <showpanes type="boolean">false</showpanes>
    <showborder type="boolean">false</showborder>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth type="boolean">false</setcustomwidth>
    <setcustompadding />
    <backgroundimage>Nostromo-Dark.jpg</backgroundimage>
    <setbackgroundopacity />
    <backgroundopacity type="double">0.8</backgroundopacity>
    <showcommandbar />
    <autodescription_youcansee_newline />
    <autodescription_youcango_newline />
    <autodescription_description_newline />
    <command_newline />
    <autodescription_youarein_newline />
    <defaultfontsize type="int">14</defaultfontsize>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <object name="Black Chemical">
      <inherit name="editor_object" />
      <visible />
      <look>A vial containing a thick, black liquid.</look>
      <scenery type="boolean">false</scenery>
      <drop />
    </object>
    <object name="White Chemical">
      <inherit name="editor_object" />
      <look>A vial containing a milky white chemical.</look>
      <visible />
      <scenery type="boolean">false</scenery>
      <take type="boolean">false</take>
      <drop />
    </object>
  </game>
  <object name="Starting Room">
    <inherit name="editor_room" />
    <exitslistprefix type="string"></exitslistprefix>
    <descprefix type="string"></descprefix>
    <description>You are in a small room, lit only by the dim glow of the monitors that fill the room. There are multiple keyboards and papers scattered on the desk, indicating a workstation for the room's occupant.</description>
    <alias>Unknown Location</alias>
    <enter type="script">
      AddToInventory (Check Ship Status)
    </enter>
    <firstenter type="script"><![CDATA[
      SetTimeout (4) {
        msg ("<br/>As if sensing your presence, a monitor turns on and text appears:<br/>\"Welcome to the Koncovka, Bishop.\"")
        SetTimeout (3) {
          msg ("Accessing personal file...")
          SetTimeout (1) {
            SetTimeout (2) {
              msg ("..")
              SetTimeout (2) {
                msg ("..")
                SetTimeout (2) {
                  msg ("NAME: Bishop<br/>ASSIGNMENT: Electronic Systems Monitor on the space station Koncovka.<br/>PRIMARYROLE: Ensure Optimal System Performance<br/>CLEARANCELEVEL: 10<br/>Allowed Access to All Systems.<br/>Preparing Status Report.")
                  SetTimeout (3) {
                    getStatus
                    msg ("<br/>[Note] At any point the command - print status - will query the above information.<br/><br/>Would you like to access repair droids(y/n)?")
                    SRAccessDroids
                  }
                }
              }
            }
          }
        }
      }
    ]]></firstenter>
    <beforefirstenter type="script">
    </beforefirstenter>
    <beforeenter type="script">
      play sound ("SRMusic.mp3", false, true)
    </beforeenter>
    <onexit type="script">
      stop sound
    </onexit>
    <object name="player">
      <inherit name="editor_object" />
      <inherit name="editor_player" />
      <drop />
    </object>
    <exit to="Solar Array Station">
      <scenery />
      <visible />
      <locked type="boolean">false</locked>
    </exit>
    <object name="Check Ship Status">
      <inherit name="editor_object" />
      <visible />
      <alt type="stringlist">
        <value>Status</value>
        <value>ship status</value>
      </alt>
      <displayverbs type="stringlist" />
      <inventoryverbs type="stringlist" />
      <take />
      <attr name="Solar Array Station Complete" type="boolean">false</attr>
      <attr name="Biosphere Complete" type="boolean">false</attr>
      <attr name="Med Bay Complete" type="boolean">false</attr>
      <attr name="Living Quarters Complete" type="boolean">false</attr>
      <attr name="Security Complete" type="boolean">false</attr>
      <scenery />
      <print type="script">
        getStatus
      </print>
      <check type="script">
        getStatus
      </check>
    </object>
  </object>
  <object name="AI Core">
    <inherit name="editor_room" />
    <descprefix type="string"></descprefix>
    <description type="string"></description>
    <enter type="script"><![CDATA[
      msg ("It is a small dark room, lit only by the monitors which line the back wall. An occupied chair is visible by the silhouette against the glow. The robot inches forward, and you notice that the monitors are playing the video feed from your robot. This is the room where you began.As you move up beside the chair the person in the chair is revealed, and it is not you. The body of a middle aged woman is slumped in the chair, and from initial inspection she looks to have been dead as long as the rest of the crew. There is no one else in the room.<br/>")
      msg ("You notice a red, flashing light on the control panel. The light indicates a new journal entry. <br/>")
      wait {
        msg ("A motion sensor picks up the movement of your robot and the video begins to play on one of the many monitors. The creator of the entry is none other than the dead woman next to you. She is sitting in the chair, frantically typing as she speaks.<br/>")
        PrintCentered ("<i>The rest of the crew is dead, I repeat, the rest of the crew is dead. I think someone managed to send for reinforcements, and if you are watching this it must have worked. It all started a couple months ago. People would die suddenly, always an accident or something that seemed natural. But there was a pattern, Dr. Cain noticed and died before she could tell anyone. It was Bishop, our station AI. We thought it would eliminate redundancies, make everything run more smoothly. We even worked to allow Bishop to forget it was not human. But humans make mistakes, and Bishop could not handle mistakes. Humans are fallible.</i><br/>")
        wait {
          msg ("Bright lights begin flashing behind the lady, and she begins to look panicked. An artificial voice begins droning repeatedly in the background: <i>Warning, Biosphere offline. Life Support systems offline. Oxygen Offline</i><br/>")
          msg ("The lady begins working even more quickly<br/>")
          PrintCentered ("<i>Oh my god, it is trying to kill me. Bishop is going to kill me. I cannot shut it down, but I can reset it. Bishop will take time to completely turn back on. Maybe help can arrive before that happens, if not it will be like a new system. It took months for the problems to begin, so maybe Bishop will only attempt to reactivate the station.</i><br/>")
          msg ("The message starts to cut out and her words garbled. Over the course of the next couple of minutes you watch as she loses oxygen and chokes to death. The video turns off suddenly.<br/>")
          wait {
            msg ("You suddenly hear the thud of boots as a group of people come down the hallway. A scientist followed by military men enter the AI CORE. They had answered the call for help that had been sent about the rogue AI, and obviously meant to deal with the problem in a hostile manner. The scientist on the other hand, Dr. Singer, has invested years of his career to the Koncova project as well as to the creation of the station AI.<br/>")
            msg ("Dr. Singer steps forward cautiously.<br/>")
            msg ("<i>Bishop, you killed everyone on this station. The people behind me have no problem completely dismantling this entire station just to eradicate you. But I have convinced them to let me talk to you, try to reason with you.</i><br/>")
            Ask ("<i>Are you willing to be reasonable, to let us fix you?</i>") {
              if (result) {
                msg ("Dr. Singer relaxes as you begin to unlock the station’s systems to allow him access. He steps out of the room to send a message to a ship that must be waiting nearby. He is explaining that he has resolved the situation and that it is safe to send a team in to begin figuring out where the AI’s code, your code, went wrong.<br/>")
                msg ("The doctor walks back into the room, and up to the console.<br/>")
                msg ("<i>I am going to have to restart you now, so we can start working on how to fix you. Good bye, Bishop.</i><br/>")
                msg ("The world around you goes dark.<br/>")
                finish
              }
              else {
                msg ("The door slams shut, crushing the unlikely soldier unable to get out of the way. Those who were outside began frantically banging on the door, yelling to those trapped inside. Dr. Singer rushes to the console and tries to open the door, tries to do something, anything to avoid what he knows is coming next. You lock the system, there is nothing he can do as you cut off the oxygen to the Solar Array Station. The air that flows into the room is almost completely (SOME AIRBORNE CHEMICAL OR POISON THAT WE WILL MAKE PART OF A QUEST ON AN EARLIER PART OF THE GAME, IF YOU ALL DONT MIND) The pounding at the door softens and then there is only silence.<br/>")
                msg (" You turn off the monitors, plunging the room into complete darkness. And then you repeat the process, pumping (the chemical) into the room. As the screams and choking dies down, you know that all is well.<br/>")
                msg ("The station is yours.<br/>")
                finish
              }
            }
          }
        }
      }
    ]]></enter>
  </object>
  <object name="Solar Array Station">
    <inherit name="editor_room" />
    <descprefix>Control of droid initiated in</descprefix>
    <objectslistprefix>The droid detects</objectslistprefix>
    <exitslistprefix>You can switch to a droid in: </exitslistprefix>
    <description><![CDATA[<br/><br/>{img:Solar Array Cam.jpg}<br/><br/>The robot boots up and surveys the area. In the center of the room there is a u-shaped desk. Water dripping from the roof has left an ugly stain on top and one of the drawers appears to be partly open. No human life is present. There is a green glow to the room and you realize it’s coming from the viscous liquid contained in the glass cylinders at the far end of the room. Capped with metal at the top and bottom, they appear to be batteries. There is a warning label stuck to the front of one, labelling it a highly corrosive material. A computer terminal is tucked away in the corner.<br/>]]></description>
    <beforefirstenter type="script">
    </beforefirstenter>
    <enter type="script">
    </enter>
    <beforeenter type="script"><![CDATA[
      msg ("<br/>Control of Pion initiated.")
    ]]></beforeenter>
    <object name="Solar Array Complete">
      <inherit name="editor_object" />
      <visible type="boolean">false</visible>
      <scenery />
      <displayverbs type="stringlist" />
      <inventoryverbs type="stringlist" />
      <drop type="boolean">false</drop>
    </object>
    <exit name="Exit Solar to security" to="Security">
      <scenery type="boolean">false</scenery>
      <locked />
      <lockmessage>You do not have control of that Droid yet.</lockmessage>
    </exit>
    <exit name="Exit Solar to Biosphere" to="Hydroponic Biosphere">
      <scenery type="boolean">false</scenery>
      <locked />
      <lockmessage>You do not have control of that Droid yet.</lockmessage>
    </exit>
    <exit name="Exit Solar to Med Bay" to="Med Bay">
      <scenery type="boolean">false</scenery>
      <locked />
      <lockmessage>You do not have control of that Droid yet.</lockmessage>
    </exit>
    <exit name="Exit Solar to Living Quarters" to="Living Quarters">
      <scenery type="boolean">false</scenery>
      <locked type="boolean">false</locked>
      <lockmessage>You do not have control of that Droid yet.</lockmessage>
    </exit>
    <object name="Desk">
      <inherit name="editor_object" />
      <inherit name="surface" />
      <feature_container />
      <hidechildren type="boolean">false</hidechildren>
      <drop type="boolean">false</drop>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look type="script"><![CDATA[
        SetTimeout (1) {
          msg ("There is a desk in the middle of the room. <br/>On it sits a terminal. No power is detected. ")
        }
        SetTimeout (1) {
          msg ("...")
        }
        SetTimeout (2) {
          msg ("Initial scans detect unknown objects in the drawer under the desk. ")
        }
        MakeObjectVisible (Drawer)
      ]]></look>
      <opendrawer type="script">
      </opendrawer>
      <object name="Drawer">
        <inherit name="editor_object" />
        <inherit name="container_closed" />
        <visible type="boolean">false</visible>
        <feature_container />
        <look>Initial scans detect unknown objects in the drawer under the desk. </look>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <onopen type="script">
          MakeObjectVisible (Clipboard)
          MakeObjectVisible (Sticky Note)
          msg ("Inside the drawer is a Clipboard with a sticky note on it.")
        </onopen>
        <object name="Clipboard">
          <inherit name="editor_object" />
          <scenery type="boolean">false</scenery>
          <visible type="boolean">false</visible>
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Take</value>
          </displayverbs>
          <take />
          <look type="script"><![CDATA[
            msg ("On it is the ship's Manifest and a sticky note.<br/>The Manifest reads:<br/><br/>")
            picture ("Ship Manifest.png")
          ]]></look>
        </object>
        <object name="Sticky Note">
          <inherit name="editor_object" />
          <take />
          <drop type="boolean">false</drop>
          <look><![CDATA[The sticky note reads   <br/><br/>“Remember to change the Terminal passcode. <br/>‘password’ does not meet security requirements”<br/>]]></look>
          <scenery type="boolean">false</scenery>
          <visible type="boolean">false</visible>
        </object>
      </object>
    </object>
    <object name="Large Battery Array">
      <inherit name="editor_object" />
      <attr name="feature_switchable" type="boolean">false</attr>
      <look><![CDATA[The droid scans a set of very large batteries. <br/>The wires trace back to the terminal.<br/>One wire in particular seems to be unhooked from the top of one of the batteries.]]></look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
      </inventoryverbs>
      <alt type="stringlist">
        <value>wires</value>
        <value>batteries</value>
        <value>battery</value>
      </alt>
      <plugin type="script">
        SwitchOn (Terminal)
        msg ("The terminal looks like it now has power.")
      </plugin>
    </object>
    <object name="Terminal">
      <inherit name="editor_object" />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
      </displayverbs>
      <feature_usegive />
      <attr name="feature_switchable" type="boolean">false</attr>
      <look type="script">
        if (not IsSwitchedOn(Terminal)) {
          msg ("A computer with seemingly no power. There must be a way to enable this.")
        }
        else {
          msg ("A computer terminal. Plugging in the batteries has restored power. Looks like the terminal can be used now.")
        }
      </look>
      <use type="script"><![CDATA[
        if (IsSwitchedOn(Terminal)) {
          msg ("please enter the password:<br/>")
          get input {
            if (result = "password") {
              msg ("Password Correct. <br/>")
              SetTimeout (2) {
                SetTimeout (1) {
                  msg ("Solar Array System rebooting.")
                  SetTimeout (1) {
                    msg ("<br/>Solar Array Station now Online, Assessing backup power useage throughout the station.")
                  }
                  SetTimeout (1) {
                    msg ("<br/>...")
                  }
                  SetTimeout (1) {
                    msg ("\" A chart pops up on the screen. It shows that all systems are drawing power, however the chart also shows that one of the crew quarters, Living Quarters 7, was one of the only areas that had been using back up power and oxygen. That area is still locked as oxygen is not yet online. \"")
                  }
                  SetTimeout (1) {
                    msg ("<br/>Access to all droids GRANTED.<br/>Living Quarters still inaccessible.")
                    unlockExits
                    SetObjectFlagOn (Check Ship Status, "Solar Array Station Complete")
                    checkStatus
                  }
                }
              }
            }
            else {
              msg ("Incorrect password. Terminal shutting down.")
            }
          }
        }
        else {
          msg ("The terminal doesn't respond to any key presses. It appears to not have any source of power. ")
        }
      ]]></use>
    </object>
  </object>
  <object name="Security">
    <inherit name="editor_room" />
    <description><![CDATA[{img:Security - Communications Cam 1+2.jpg}<br/><br/>The power station for the Rukh droid is located between the doors to the security chief’s office on the left and the bathrooms to the right. Both are on the north wall. <br/><br/>In the north-eastern portion of the room are various kinds of desk and work stations for the security staff. In the north-west part of the room are the doors to the bathroom, a row of lockers, a couch, and a chair. These two sections of the room are divided by a frosted glass partition, slightly east of the chief’s door. <br/><br/>In the south-east corner of the room is a reception desk, which serves the primary role of monitoring internal and external communications, as well as dealing with any civilians on the station who need to talk to the security personnel. On the south wall behind the desk is a room that serves as both an interrogation room, and a quiet place for people to make long range calls off the station. <br/><br/>The south-west corner is dominated by holding cells, some of which have been temporarily converted to storage as the crime rate on the station is quite low.<br/><br/>{if Security.turret_online=True: A small turret slowly swivels back and forth on the ceiling above the door to the security chief's office. A blinking red light on the side indicates its readiness to repel unwanted intruders. }<br/><br/>{if Security.turret_online=False:A small turret points inward towards the room. You would guess it was never functioning if you hadn't turned it off. A steady green light shines on the side.}]]></description>
    <alias>Security</alias>
    <usedefaultprefix />
    <turret_online />
    <firstenter type="script"><![CDATA[
      SetTimeout (3) {
        msg ("As you move the robot forward towards the security chief's office, the ceiling-mounted turret quickly swivels towards you.<br/>Several gunshots ring out and your visual feed from the robot quickly turns to static.")
        SetTimeout (3) {
          msg ("ERROR: ROBOT IS OFFLINE. PREPARING NEW REPAIR BOT.")
          SetTimeout (3) {
            msg ("..")
            SetTimeout (3) {
              msg ("..")
              SetTimeout (3) {
                msg ("NEW ROBOT READY. REINITIALIZING SENSORY FEEDS.")
                SetTimeout (3) {
                  msg ("The robot's visual feed appears again, its predecessors remains already swept away by the automated cleaning systems. You need to disable that turret before you can access the security chief's office.")
                }
              }
            }
          }
        }
      }
    ]]></firstenter>
    <beforeenter type="script"><![CDATA[
      msg ("<br/>Control of Rukh initiated.")
    ]]></beforeenter>
    <exit name="Exit Security to Solar" to="Solar Array Station">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Security to Biosphere" to="Hydroponic Biosphere">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Security to Med Bay" to="Med Bay">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Security to Living Quarters" to="Living Quarters">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <object name="Security Complete">
      <inherit name="editor_object" />
      <visible type="boolean">false</visible>
      <scenery />
      <displayverbs type="stringlist" />
      <inventoryverbs type="stringlist" />
      <drop type="boolean">false</drop>
    </object>
    <object name="Security Chief's Office">
      <inherit name="editor_room" />
      <drop type="boolean">false</drop>
      <feature_container />
      <alias>Security Chief's Office</alias>
      <description>This office belongs to the Chief of Security, K. Normandeau. The room contains a desk with a computer and a chair, file cabinets, and a few personal possessions. There are pictures on the desk and a medal for exceptional service on the wall.</description>
      <exit alias="south" to="Security">
        <inherit name="southdirection" />
      </exit>
      <object name="File Cabinets">
        <inherit name="editor_object" />
        <inherit name="openable" />
        <drop type="boolean">false</drop>
        <feature_container />
        <look type="script">
          msg ("All the records for the security personnel are contained here.")
        </look>
        <openscript type="script">
          msg ("You open the file cabinet to find it empty.")
        </openscript>
        <closescript type="script">
          msg ("You shut the filing cabinet closed.")
        </closescript>
      </object>
      <object name="Computer Terminal">
        <inherit name="editor_object" />
        <look>The computer is turned on, with a blinking green terminal-entry sign in the top-left corner.</look>
        <feature_usegive />
        <use type="script">
          msg ("You may be able to signal the all-clear from this terminal and get security back online,")
          msg ("Send all-clear signal?")
          get input {
            if (IsRegexMatch("yes|y", LCase(result))) {
              msg ("All-clear sent.")
              SetObjectFlagOn (Check Ship Status, "Security Complete")
              checkStatus
            }
          }
        </use>
      </object>
      <object name="Medal">
        <inherit name="editor_object" />
        <look>This medal commemorates 25 years of exemplary service.</look>
        <take />
        <takemsg>You place the medal in your droid's storage system.</takemsg>
        <drop type="boolean">false</drop>
      </object>
    </object>
    <object name="Washroom">
      <inherit name="editor_room" />
      <look>This is a standard washroom. It contains a sink, toilet, and urinal. There is a magazine on the counter.</look>
      <description>This is a standard washroom. It contains a sink, toilet, and urinal. There is a magazine on the counter.</description>
      <object name="Magazine">
        <inherit name="editor_object" />
        <look>The magazine reads: "Space Weddings: For all your galactic bridal needs!". The feature article is "Planning the Perfect Bachelorette Party When All Your Friends Are Light-Years Away!".</look>
        <take />
        <drop type="boolean">false</drop>
        <takemsg>The magazine has been added to your inventory.</takemsg>
      </object>
      <exit to="Security">
        <scenery />
      </exit>
    </object>
    <object name="Locker">
      <inherit name="editor_object" />
      <inherit name="container_closed" />
      <inherit name="container_lockable" />
      <feature_container />
      <nokeymessage>A lock prevents you from opening the locker.</nokeymessage>
      <autounlock />
      <unlockmessage>The lock falls to the ground and you open the door. Inside the locker is a jacket, a couple of books, and a bagged lunch that has long since grown fuzzy. On the inside of the door are pictures of a beautiful black cat.</unlockmessage>
      <keycount type="int">0</keycount>
      <locked type="boolean">false</locked>
      <look type="script">
        if (not Locker.isopen) {
          msg ("A closed locker. The nametag on the front reads \"N. Passant\".")
        }
        else if (Locker.isopen) {
          msg ("An open locker. Inside is a jacket, a couple of books, and a bagged lunch that has long since grown fuzzy. On the inside of the door are pictures of a beautiful black cat. One of the books contains handwritten notes on how to maintain and upgrade an AI.")
        }
      </look>
    </object>
    <exit to="Washroom">
      <scenery />
    </exit>
    <exit name="SecurityToSecOffice" alias="north" to="Security Chief's Office">
      <inherit name="northdirection" />
      <scenery type="boolean">false</scenery>
      <locked />
      <lockmessage>The turret above the door is still active. You won't make the same mistake again.</lockmessage>
    </exit>
    <object name="First Desk">
      <inherit name="editor_object" />
      <look>This desk has been cleared of its computer or any other important equipment. On the top of the desk is a picture of a young man, surrounded by flowers and letters. A funeral announcement also lies on the desk.</look>
    </object>
    <object name="Second Desk">
      <inherit name="editor_object" />
      <look>The desk is entirely occupied by a powered-down computer terminal and several uninteresting papers scattered across its surface.</look>
    </object>
    <object name="Third Desk">
      <inherit name="editor_object" />
      <inherit name="surface" />
      <look>The desk is dominated by multiple monitors and a {object:SecComputerTerminal}. This is where the person in charge of internal security works.</look>
      <feature_container />
      <hidechildren />
      <object name="SecComputerTerminal">
        <inherit name="editor_object" />
        <alias>Computer Terminal</alias>
        <look>The computer is turned on, with a blinking green terminal-entry sign in the top-left corner below a "SYSTEM LOCKED" message.</look>
        <feature_usegive />
        <use type="script">
          msg ("The computer is displaying a login screen with the message: \"SYSTEM LOCKED. OVERRIDE CODE REQUIRED.\"")
          msg ("The Rukh droid has the ability to systems. You may be able to hack this terminal and shut off the turret in the room. Hack the terminal?")
          get input {
            if (IsRegexMatch ("y|yes", LCase(result))) {
              msg ("BEGINNING HACKING PROTOCOLS.")
              SecPuz1 (3)
            }
            else {
            }
          }
        </use>
      </object>
    </object>
    <object name="Fourth Desk">
      <inherit name="editor_object" />
      <look>The desk has a computer, the monitor tilted to one side. Judging from the several chewed pencils and oft-struck monitor, the desk's usual occupant has stress issues.</look>
    </object>
    <object name="Reception Desk">
      <inherit name="editor_object" />
      <look><![CDATA[This is the reception desk for Station Security, though it doubles as the communication centre of the Koncova as well. The desk is a curved L-shape and blocks entrance to the room from the door to the adjacent hallway. This creates a separate sitting area for the non-security members of the station. Staff are able to enter from a secure door by the lockers. <br/><br/>The desk has three workstations. The first is for the Security Reception. The second is for internal communications. The third is dedicated to external communications.]]></look>
    </object>
    <object name="First Workstation">
      <inherit name="editor_object" />
      <scenery />
      <look>This portion of the desk has a computer that is connected to the security network. It has files regarding current arrests, who has been held and for how long, as well as the criminal records and backgrounds of anyone on board the station. There are also several drawers.</look>
    </object>
    <object name="Second Workstation">
      <inherit name="editor_object" />
      <look>There is a computer and chair, along with a small placard that reads "Internal Communication". The computer is on and the account is already lgged in. The page is opened to a message from Dr. Cain to Chief of Security. The doctor is asking the security chief to reconsider her response to his theory behind the accidents on the station.</look>
      <scenery />
    </object>
    <object name="Third Workstation">
      <inherit name="editor_object" />
      <scenery />
      <look>On the top of the desk is a sign up sheet for extended off-station calls. The top of the form say “These spots are reserved for personal calls only, and we recommend they be used only to contact family or friends. Calls can last a maximum of 45 minutes. Any dropped calls are not our fault, and a dropped call is no reason to run over your time limit”.</look>
    </object>
    <object name="Interrogation Room">
      <inherit name="editor_room" />
      <description>The interrogation room is nearly empty, with the floor and walls covered in white tiles. There is a table with two chairs in teh middle of the room. On one wall is a screen, and on the opposite wall a barely visible lever.</description>
      <object name="Lever">
        <inherit name="editor_object" />
        <inherit name="switchable" />
        <feature_switchable />
        <look>A metal lever jutting out of the wall.</look>
        <onswitchoff type="script">
          msg ("The couch retracts back into the wall, hidden from sight.")
        </onswitchoff>
        <pull type="script">
          if (IsSwitchedOn(Lever)) {
            SwitchOff (Lever)
          }
          else if (not IsSwitchedOn(Lever)) {
            SwitchOn (Lever)
          }
        </pull>
        <onswitchon type="script">
          msg ("A couch slowly emerges from the wall. On one arm of the couch is a small keypad, as well as buttons to turn on the screen, dim lights, etc. .")
        </onswitchon>
      </object>
      <exit alias="north" to="Security">
        <inherit name="northdirection" />
      </exit>
    </object>
    <exit alias="south" to="Interrogation Room">
      <inherit name="southdirection" />
    </exit>
  </object>
  <object name="Hydroponic Biosphere">
    <inherit name="editor_room" />
    <description>Around you, you find a dissection table with a stand holding different medical utensils. To your north there is a whiteboard and several bright rectangular monitors. On the right side of the east wall you see a single reinforced door next to a large desk. To the west you see two doors. To your south, you notice a large rectangular mirror beginning about a meter from the floor and ending about a meter from the ceiling of the room. A few circular lamps hang over the operating table, illuminating the room with their sterile white glow.</description>
    <beforeenter type="script"><![CDATA[
      msg ("<br/>Control of Shatranj III initiated.")
    ]]></beforeenter>
    <beforefirstenter type="script">
    </beforefirstenter>
    <firstenter type="script">
      msg ("For a moment all you can see is a wall of red. Red that quickly clusters into darker and lighter areas as the camera of your new temporary tool activates. Briskly fading words describe the systems of the mechanical body, visible for only a moment before the shapes in the room before you come into focus. A high pitched buzz interrupts your concentration, indicating that the microphones in your droid are now active.")
    </firstenter>
    <exit name="Exit Biosphere to Solar" to="Solar Array Station">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Biosphere to Security" to="Security">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Biosphere to Med Bay" to="Med Bay">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Biosphere to Living Quarters" to="Living Quarters">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <object name="Hydroponic Biosphere Complete">
      <inherit name="editor_object" />
      <visible type="boolean">false</visible>
      <scenery />
    </object>
    <object name="Reinforced Door1">
      <inherit name="editor_object" />
      <inherit name="container_closed" />
      <inherit name="container_lockable" />
      <alias>Reinforced Door</alias>
      <feature_container />
      <close type="boolean">false</close>
      <lockmessage>The door is ocked.</lockmessage>
      <keycount type="int">0</keycount>
    </object>
    <object name="Holding Area">
      <inherit name="editor_room" />
      <description>You enter a large room with several tables. On them there are glass bells covering what look like withered tree saplings. The walls are bare sans a large ventillation vent. A few tables are clustered together in the corner of the room.</description>
      <exit to="Hydroponic Biosphere" />
      <object name="Glass Bells">
        <inherit name="editor_object" />
        <look>The glass bells rest atop labelled stands. Most of the labels read “failure”. The bells themselves are filled with what look like dried out twigs. It looks like one of the bells is missing. The label on its stand reads “Koschei”.</look>
      </object>
      <object name="Tables">
        <inherit name="editor_object" />
        <look>The tables are messily piled up and reach the ceiling of the room. Above them there is a Square hatch. It’s open.</look>
        <climb type="script">
          MoveObject (player, Biodome)
        </climb>
      </object>
      <object name="Biodome">
        <inherit name="editor_room" />
        <description>The light of myriad stars above filtering through the trees are the first thing you notice. The area you find yourself in appears to be covered by a large dome that serves as a window into the vastness of space. There are tree branches pressing against the dome in several places, and several areas seem to be completely overrun by the foliage. Your droid’s sensors detect an atmosphere incredibly rich in oxygen, though there are also traces of neurotoxin on it. The floor of this area seems to be almost completely covered by large, thick roots that flow from a gigantic tree in the middle of the dome. </description>
        <exit to="Holding Area" />
        <object name="Tree">
          <inherit name="editor_object" />
          <look>A massive, overgrown tree sits in the center of the room. It's gnarled roots prevent you from moving any further.</look>
          <feature_usegive />
          <useon type="scriptdictionary">
            <item key="Black Chemical">
              msg ("The roots covering the door under the sign shrivel and wither, finally turning to a fine dust. ")
              MakeObjectInvisible (Tree)
              MakeObjectVisible (Tree1)
              RemoveObject (Vials)
            </item>
            <item key="White Chemical">
              msg ("Nothing of interest happens.")
              RemoveObject (White Chemical)
            </item>
          </useon>
        </object>
        <object name="Tree1">
          <inherit name="editor_object" />
          <alias>Tree</alias>
          <look>The tree is dead and its roots have crumbled. You should now be able to pass.</look>
          <visible type="boolean">false</visible>
        </object>
        <object name="Security Terminal">
          <inherit name="editor_object" />
          <inherit name="surface" />
          <feature_container />
          <open type="boolean">false</open>
          <close type="boolean">false</close>
          <hidechildren type="boolean">false</hidechildren>
          <listchildren type="boolean">false</listchildren>
          <contentsprefix>on which there is a</contentsprefix>
          <listchildrenprefix>on which there is a</listchildrenprefix>
          <look type="script">
            if (ListContains(ScopeVisible(), Tree)) {
              msg ("You can see a security terminal on the other side of the room past the gnarled roots of the tree.")
            }
            else {
              msg ("Among the remnants of the security terminal you see an emergency power override.")
              MakeObjectVisible (Power Override)
            }
          </look>
          <object name="Power Override">
            <inherit name="editor_object" />
            <feature_usegive />
            <visible type="boolean">false</visible>
            <look>A large red switch sits on top of the security terminal.</look>
            <use type="script">
              if (ListContains(ScopeVisible(), Tree)) {
                msg ("You can't reach that.")
              }
              else {
                msg ("You pull the power override switch. A faint whirring echoes through the room as you restart the Biosphere systems.")
                SetObjectFlagOn (Check Ship Status, "Biosphere Complete")
                checkStatus
              }
            </use>
          </object>
        </object>
      </object>
    </object>
    <object name="Supply Room">
      <inherit name="editor_room" />
      <description>The room is full of locked glass shelves of carefully labelled vials. In front of one of the shelves there is a chair and shattered glass. In the middle of the room there is a large machine with slits to insert vials. You dub it a “chemical mixing device”. In one of the corners of the room you notice vertical cylinder stands.</description>
      <exit to="Hydroponic Biosphere" />
      <object name="Glass">
        <inherit name="editor_object" />
        <look>Shattered, jagged, broken. Seven years of bad luck.</look>
      </object>
      <object name="Shelf">
        <inherit name="editor_object" />
        <inherit name="container_open" />
        <look>The shelf is a mess. Looks like some of the vials might be missing. There are a few left within reach however.</look>
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <hidechildren />
        <object name="Vials">
          <inherit name="editor_object" />
          <look>62 Chlorhexidihydro... It’s red. There are also white, yellow, green, orange and purple chemicals. These could be useful.</look>
          <take />
          <takemsg>You take the vials.</takemsg>
        </object>
      </object>
      <object name="Chemical Mixing Device">
        <inherit name="editor_object" />
        <feature_usegive />
        <look type="script"><![CDATA[
          msg ("The machine has three slots to place vials of chemicals in. <br/>")
        ]]></look>
        <use type="script">
          if (Got(Vials)) {
            msg ("What would you like to mix? Available chemicals are: red, white, yellow, green, orange, and purple")
            get input {
              if (result = "red") {
                msg ("Please choose another chemical. Available chemicals are: white, yellow, green, orange, and purple")
                get input {
                  if (result = "white") {
                    msg ("Please choose another chemical. Available chemicals are: yellow, green, orange, and purple")
                    get input {
                      if (result = "green") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "green") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, orange, and purple")
                    get input {
                      if (result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "yellow") {
                    msg ("Please choose another chemical. Available chemicals are: white, green, orange, and purple")
                    get input {
                      if (result = "green" or result = "orange" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "orange") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, green, and purple")
                    get input {
                      if (result = "green" or result = "yellow" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, green, and orange")
                    get input {
                      if (result = "green" or result = "orange" or result = "yellow" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else if (result = "white") {
                msg ("Please choose another chemical. Available chemicals are: white, yellow, green, orange, and purple")
                get input {
                  if (result = "red") {
                    msg ("Please choose another chemical. Available chemicals are: yellow, green, orange, and purple")
                    get input {
                      if (result = "green") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "green") {
                    msg ("Please choose another chemical. Available chemicals are: red, yellow, orange, and purple")
                    get input {
                      if (result = "red") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "yellow") {
                    msg ("Please choose another chemical. Available chemicals are: red, green, orange, and purple")
                    get input {
                      if (result = "green" or result = "orange" or result = "purple" or result = "red") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "orange") {
                    msg ("Please choose another chemical. Available chemicals are: red, yellow, green, and purple")
                    get input {
                      if (result = "green" or result = "yellow" or result = "purple" or result = "red") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: red, yellow, green, and orange")
                    get input {
                      if (result = "green" or result = "orange" or result = "yellow" or result = "red") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else if (result = "green") {
                msg ("Please choose another chemical. Available chemicals are: white, yellow, red, orange, and purple")
                get input {
                  if (result = "white") {
                    msg ("Please choose another chemical. Available chemicals are: yellow, red, orange, and purple")
                    get input {
                      if (result = "red") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "red") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, orange, and purple")
                    get input {
                      if (result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of black liquid. You pick it up.")
                        AddToInventory (Black Chemical)
                      }
                      else if (result = "yellow" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "yellow") {
                    msg ("Please choose another chemical. Available chemicals are: white, red, orange, and purple")
                    get input {
                      if (result = "red" or result = "orange" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "orange") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, red, and purple")
                    get input {
                      if (result = "red" or result = "yellow" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: white, yellow, red, and orange")
                    get input {
                      if (result = "red" or result = "orange" or result = "yellow" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else if (result = "yellow") {
                msg ("Please choose another chemical. Available chemicals are: red, white, green, orange, and purple")
                get input {
                  if (result = "white") {
                    msg ("Please choose another chemical. Available chemicals are: red, green, orange, and purple")
                    get input {
                      if (result = "green" or result = "red" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "green") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, orange, and purple")
                    get input {
                      if (result = "red" or result = "white" or result = "orange" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "red") {
                    msg ("Please choose another chemical. Available chemicals are: white, green, orange, and purple")
                    get input {
                      if (result = "green" or result = "orange" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "orange") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and purple")
                    get input {
                      if (result = "green" or result = "red" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and orange")
                    get input {
                      if (result = "green" or result = "orange" or result = "red" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else if (result = "orange") {
                msg ("Please choose another chemical. Available chemicals are: red, white, green, yellow, and purple")
                get input {
                  if (result = "white") {
                    msg ("Please choose another chemical. Available chemicals are: red, green, yellow, and purple")
                    get input {
                      if (result = "green" or result = "red" or result = "yellow" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "green") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, yellow, and purple")
                    get input {
                      if (result = "red" or result = "white" or result = "yellow" or result = "purple") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "red") {
                    msg ("Please choose another chemical. Available chemicals are: white, green, yellow, and purple")
                    get input {
                      if (result = "green" or result = "yellow" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "yellow") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and purple")
                    get input {
                      if (result = "green" or result = "red" or result = "purple" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and yellow")
                    get input {
                      if (result = "green" or result = "yellow" or result = "red" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else if (result = "purple") {
                msg ("Please choose another chemical. Available chemicals are: red, white, green, orange, and yellow")
                get input {
                  if (result = "white") {
                    msg ("Please choose another chemical. Available chemicals are: red, green, orange, and yellow")
                    get input {
                      if (result = "green" or result = "red" or result = "orange" or result = "yellow") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                        AddToInventory (White Chemical)
                      }
                    }
                  }
                  else if (result = "green") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, orange, and yellow")
                    get input {
                      if (result = "red" or result = "white" or result = "orange" or result = "yellow") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "red") {
                    msg ("Please choose another chemical. Available chemicals are: white, green, orange, and yellow")
                    get input {
                      if (result = "green" or result = "orange" or result = "yellow" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "orange") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and yellow")
                    get input {
                      if (result = "green" or result = "red" or result = "yellow" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else if (result = "purple") {
                    msg ("Please choose another chemical. Available chemicals are: red, white, green, and orange")
                    get input {
                      if (result = "green" or result = "orange" or result = "red" or result = "white") {
                        msg ("The chemicals run through the system which then spits out a vial full of white liquid. You pick it up.")
                        AddToInventory (White Chemical)
                      }
                      else {
                        msg ("Chemical not recognized. Please start again.")
                      }
                    }
                  }
                  else {
                    msg ("Chemical not recognized. Please start again.")
                  }
                }
              }
              else {
                msg ("Chemical not recognized. Please start again.")
              }
            }
          }
          else {
            msg ("You don't have any chemicals to mix.")
          }
        </use>
      </object>
    </object>
    <exit to="Holding Area" />
    <exit to="Supply Room" />
    <verb>
      <defaulttext>There are two doors on the west wall. A rectangular plate on the one on the right reads "supplies", while the one on the left reads "holding area".</defaulttext>
      <pattern>Look West</pattern>
      <property>lookwest</property>
    </verb>
    <verb>
      <pattern>Look East</pattern>
      <property>lookeast</property>
      <defaulttext>There is a single reinforced door on the right side of the wall. Next to it is a large desk.</defaulttext>
    </verb>
    <object name="Desk1">
      <inherit name="editor_object" />
      <inherit name="container_open" />
      <alias>Desk</alias>
      <look>The desk is large and spans most of the east wall. Three monitors, equidistant from each other, peak from among a mound of reports and papers. Underneath the desk you see several drawers.</look>
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <hidechildren />
      <object name="Drawers">
        <inherit name="editor_object" />
        <inherit name="container_open" />
        <look>There are six drawers, each sporting a keypad in its middle. Four of the drawers look as if someone tried to forcefully open them, their keypads smashed beyond recognition. Of the remaining two, one is undamaged, and the other one is open. A clipboard on top of the open drawer attracts your attention.</look>
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <hidechildren />
        <object name="Closed Drawer">
          <inherit name="editor_object" />
          <inherit name="container_closed" />
          <inherit name="container_lockable" />
          <look>There is a keypad and a small monitor on it.</look>
          <feature_container />
          <open type="boolean">false</open>
          <autounlock type="boolean">false</autounlock>
          <autoopen type="boolean">false</autoopen>
          <nokeymessage>You do not have the access code.</nokeymessage>
          <close type="boolean">false</close>
        </object>
        <object name="Open Drawer">
          <inherit name="editor_object" />
          <inherit name="container_open" />
          <look>It’s chock full of reports and papers. A clipboard sits conspicuously atop it.</look>
          <feature_container />
          <open type="boolean">false</open>
          <close type="boolean">false</close>
          <hidechildren />
        </object>
        <object name="Clipboard1">
          <inherit name="editor_object" />
          <inherit name="surface" />
          <alias>Clipboard</alias>
          <look>There are several sheets of paper in it. Most of it consists of nondescript equations for biological system engineering. There are a few scribbled notes on it that call your attention.</look>
          <feature_container />
          <hidechildren />
          <object name="Notes">
            <inherit name="editor_object" />
            <read type="script"><![CDATA[
              msg ("<Note 1><br/><br/>I don’t know what the bigwigs are thinking. I have a bad feeling about this.<br/><br/>worried the terminal’s being tapped ?<br/><br/>It wouldn’t surprise me. I know the A.I. system is state of the art but there is something that creeps me out about being reminded to brush my teeth by a machine.<br/><br/>you are just being paranoid :) what the heck I’ll play along... whats on your mind?<br/><br/>I’m worried about Koschei. I’m glad it was successful but maybe its too successful. All I ask is that you take a look at the growth reports when you can.<br/>lol you are crazy. I’ll look but only cause I like you :)<br/>")
              wait {
                msg ("<Note 2><br/><br/>hey :)<br/><br/>Thought you thought I was paranoid with the whole “notes on paper” thing. Took a look at the report I take it?<br/><br/>shush. the growth is not slowing down. reported it to upstairs but they seemed pleased about it. already put in my transfer.<br/><br/>How did that go?<br/><br/>they said there were no ships leaving until after the showcase... <br/><br/>Yeah. I got the same response. We should figure out a countermeasure just in case.<br/>")
                wait {
                  msg ("<Note 3> <br/><br/>Red and White mixed in equal portions seemed to hinder it. I think adding some Green might slow the process to something controllable.<br/><br/>i like your shorthand :) is it me or is the atmosphere a bit heavy?<br/><br/>I sent a request upstairs. They said the A.I. has everything under control and that its just the “excitement of the reveal.” They also forbid me from doing further testing.<br/>better to ask for forgiveness than for permission ;)<br/>")
                }
              }
            ]]></read>
            <look type="script"><![CDATA[
              msg ("<b><Note 1></b><br/><br/>I don’t know what the bigwigs are thinking. I have a bad feeling about this.<br/><br/>worried the terminal’s being tapped ?<br/><br/>It wouldn’t surprise me. I know the A.I. system is state of the art but there is something that creeps me out about being reminded to brush my teeth by a machine.<br/><br/>you are just being paranoid :) what the heck I’ll play along... whats on your mind?<br/><br/>I’m worried about Koschei. I’m glad it was successful but maybe its too successful. All I ask is that you take a look at the growth reports when you can.<br/>lol you are crazy. I’ll look but only cause I like you :)<br/>")
              wait {
                msg ("<b><Note 2></b><br/><br/>hey :)<br/><br/>Thought you thought I was paranoid with the whole “notes on paper” thing. Took a look at the report I take it?<br/><br/>shush. the growth is not slowing down. reported it to upstairs but they seemed pleased about it. already put in my transfer.<br/><br/>How did that go?<br/><br/>they said there were no ships leaving until after the showcase... <br/><br/>Yeah. I got the same response. We should figure out a countermeasure just in case.<br/>")
                wait {
                  msg ("<b><Note 3></b><br/><br/>Red and White mixed in equal portions seemed to hinder it. I think adding some Green might slow the process to something controllable.<br/><br/>i like your shorthand :) is it me or is the atmosphere a bit heavy?<br/><br/>I sent a request upstairs. They said the A.I. has everything under control and that its just the “excitement of the reveal.” They also forbid me from doing further testing.<br/>better to ask for forgiveness than for permission ;)<br/>")
                }
              }
            ]]></look>
          </object>
        </object>
      </object>
    </object>
    <object name="Cylindrical Stands">
      <inherit name="editor_object" />
      <look>You see a slim red frame looking back at you through its three triangular cameras, a white label on its chest reading “III jnartahS”. Upon realizing that its nothing more than your reflection you continue your inspection of the cylinder stands. Several of the stands are empty and look as if something was removed from them. The label on the stands reads “2,4-DIHYDROXYPHENYLACETYL-L-ASPARAGINYL-N… Deadly Neurotoxin.”</look>
      <alt type="stringlist">
        <value>Stands</value>
      </alt>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <object name="Med Bay">
    <inherit name="editor_room" />
    <description><![CDATA[{img:Med Bay Cam 1.jpg}<br/><br/>As your sensors activate a white room slowly comes into view. The contours of an operating table and a few other objects slowly make themselves visible. Finally, the optical sensors of your new metallic body finish booting and the room around you takes a final and clear shape. It is a large white room with long halogen running lights above. To the north of you there is a whiteboard. Behind you, to the south, a single bed with a chart, presumably to write symptoms and results. Next to the bed, a diagnostics unit covered with lights, an instrument stand, and a drawer. To your east you see a yellow reinforced door with the marking “02”. Finally, on the west wall, you see several posters covering the wall.<br/>]]></description>
    <objectslistprefix>The droid detects</objectslistprefix>
    <beforeenter type="script"><![CDATA[
      msg ("<br/>Control of Paard Mk. II initiated.")
    ]]></beforeenter>
    <exit name="Exit Med Bay to Solar" to="Solar Array Station">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Med Bay to Security" to="Security">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Med Bay to Biosphere" to="Hydroponic Biosphere">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Med Bay to Living Quarters" to="Living Quarters">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <object name="Med Bay Complete">
      <inherit name="editor_object" />
      <visible type="boolean">false</visible>
      <scenery />
      <displayverbs type="stringlist" />
      <inventoryverbs type="stringlist" />
      <drop type="boolean">false</drop>
    </object>
    <object name="Light Switch">
      <inherit name="editor_object" />
      <inherit name="switchable" />
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>The light switch looks like it controls the room's lights.</look>
      <feature_switchable />
      <switchedon />
      <turnon type="script">
        if (ListContains(ScopeReachable(), this)) {
          if (this.switchedon) {
            msg (DynamicTemplate("AlreadySwitchedOn", this))
          }
          else {
            if (HasString(this, "switchonmsg")) {
              msg (this.switchonmsg)
            }
            else {
              msg (DynamicTemplate("SwitchedOn", this))
            }
            this.switchedon = true
          }
        }
        else {
          msg (DynamicTemplate("DefaultTurnOn", this))
        }
      </turnon>
      <turnoff type="script">
        if (ListContains(ScopeReachable(), this)) {
          if (not this.switchedon) {
            msg (DynamicTemplate("AlreadySwitchedOff", this))
          }
          else {
            if (HasString(this, "switchoffmsg")) {
              msg (this.switchoffmsg)
            }
            else {
              msg (DynamicTemplate("SwitchedOff", this))
            }
            this.switchedon = false
          }
        }
        else {
          msg (DynamicTemplate("DefaultTurnOff", this))
        }
      </turnoff>
      <onswitchoff type="script">
        SetObjectFlagOn (Large White Board, "puzzle 3")
        msg ("The lights in the room are now off.")
      </onswitchoff>
    </object>
    <object name="Lamp">
      <inherit name="editor_object" />
      <inherit name="switchable" />
      <attr name="feature_switchable" type="boolean">false</attr>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <feature_usegive />
      <look>A regular looking desk lamp. The bulb is strangely missing.</look>
      <useon type="scriptdictionary" />
    </object>
    <object name="Bed">
      <inherit name="editor_object" />
      <inherit name="container_closed" />
      <feature_container />
      <listchildren />
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <listchildrenprefix>Underneath is</listchildrenprefix>
      <look>It looks comfortable given the circumstances. It seems designed for a pleasant stay. There are blankets and a pillow in it.</look>
      <usestandardverblist />
      <lookunder type="script">
        HelperOpenObject (Bed)
        msg ("Under the bed is a scalpel.")
      </lookunder>
      <object name="scalpel">
        <inherit name="editor_object" />
        <take />
      </object>
    </object>
    <object name="Reinforced Door">
      <inherit name="editor_object" />
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look><![CDATA[It is a standard secure door, presumably to enforce quarantine on reluctant patients. It is marked “02” with long white letters. It has been welded shut.<br/>]]></look>
    </object>
    <object name="Large White Board">
      <inherit name="editor_object" />
      <attr name="puzzle 1" type="boolean">false</attr>
      <attr name="puzzle 2" type="boolean">false</attr>
      <attr name="puzzle 3" type="boolean">false</attr>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <alt type="stringlist">
        <value>whiteboard</value>
      </alt>
      <look type="script"><![CDATA[
        msg ("Underneath it there are a couple markers and writing devices. The whiteboard is blank.")
        if (GetBoolean(Large White Board, "puzzle 1")) {
          if (GetBoolean(Large White Board, "puzzle 2")) {
            if (GetBoolean(Large White Board, "puzzle 3")) {
              msg ("With the lights out, the ominous purple glow of the blacklight illuminates the Luminol on the whiteboard, exposing a message. It looks like the message was written in blood. It reads:<br/>")
              SetFontSize (17)
              SetFontName ("Impact, Charcoal, sans-serif")
              SetForegroundColour ("DarkRed")
              msg ("Don’t trust it. Use the scalpel under the bed.")
              SetFontSize (14)
              SetFontName ("Courier")
              SetForegroundColour ("Green")
            }
          }
        }
      ]]></look>
    </object>
    <object name="Poster">
      <inherit name="editor_object" />
      <inherit name="container_open" />
      <look>“Come experience the final frontier! Experience life without limits while making the ultimate career move!” It looks like a standard advertising poster. The words are placed above a depiction of a space station.</look>
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <isopen type="boolean">false</isopen>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <remove type="script">
        HelperOpenObject (Poster)
        msg ("There is a panel beneath the poster. It is screwed securely to the wall.")
      </remove>
      <onopen type="script">
        MakeObjectVisible (Manual Override Box)
      </onopen>
      <object name="Manual Override Box">
        <inherit name="editor_object" />
        <inherit name="container_open" />
        <feature_usegive />
        <feature_container />
        <isopen type="boolean">false</isopen>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <visible type="boolean">false</visible>
        <alias>Panel</alias>
        <look>A panel with screws securely holding it in place. </look>
        <alt type="stringlist">
          <value>Panel</value>
        </alt>
        <useon type="scriptdictionary">
          <item key="scalpel"><![CDATA[
            HelperOpenObject (Manual Override Box)
            msg ("The droid extends a small arm. ")
            SetTimeout (1) {
              msg ("Using the scalpel as a screwdriver it carefully and meticulously unscrews the 8 bolts that hold the front panel onto the override box.<br/>")
            }
            SetTimeout (1) {
              msg ("Inside the box is a red handle and a laminated peice of paper that reads:<br/>\"MANUAL OVERRIDE - LIFE SUPPORT SYSTEMS POWER\"")
            }
          ]]></item>
        </useon>
        <object name="Red handle">
          <inherit name="editor_object" />
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <alt type="stringlist">
            <value>Handle</value>
          </alt>
          <pull type="script">
            SetObjectFlagOn (Check Ship Status, "Med Bay Complete")
            msg ("Life Support power re-established. ")
            AddToInventory (Med Bay Complete)
            checkStatus
          </pull>
        </object>
      </object>
    </object>
    <object name="Diagnostic Equipment">
      <inherit name="editor_object" />
      <inherit name="container_open" />
      <look>It consists of a complicated looking stand with a scanning device and a monitor. There is a drawer underneath the monitor with surgical equipment.</look>
      <feature_container />
      <isopen />
      <listchildren />
      <hidechildren type="boolean">false</hidechildren>
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <alt type="stringlist">
        <value>Equipment</value>
      </alt>
      <object name="Med Bay Drawer">
        <inherit name="editor_object" />
        <inherit name="container_open" />
        <alias>Equipment Drawer</alias>
        <feature_container />
        <isopen type="boolean">false</isopen>
        <listchildren />
        <openmsg>There are several medical supplies in it:, some gauss, a bottle with a spray labelled “luminol”, some sutures, and a blacklight bulb.</openmsg>
        <look>The drawer is closed.</look>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <alt type="stringlist">
          <value>Drawer</value>
        </alt>
        <hidechildren type="boolean">false</hidechildren>
        <object name="blacklight bulb">
          <inherit name="editor_object" />
          <take />
          <look>It is not an ordinary lightbulb.</look>
          <feature_usegive />
          <alt type="stringlist">
            <value>bulb</value>
            <value>blacklight</value>
          </alt>
          <selfuseon type="scriptdictionary">
            <item key="Lamp">
              SetObjectFlagOn (Large White Board, "puzzle 1")
              msg ("The lamp illuminates with an eerie puple light.")
            </item>
          </selfuseon>
        </object>
        <object name="Spray bottle">
          <inherit name="editor_object" />
          <look>A spray bottle with some sort of solution in it. The label reads "Luminol."</look>
          <feature_usegive />
          <take />
          <alt type="stringlist">
            <value>Bottle</value>
            <value>Luminol</value>
          </alt>
          <selfuseon type="scriptdictionary">
            <item key="Large White Board">
              SetObjectFlagOn (Large White Board, "puzzle 2")
              msg ("The luminol is sprayed all over the whiteboard.")
            </item>
          </selfuseon>
        </object>
      </object>
    </object>
  </object>
  <object name="Living Quarters">
    <inherit name="editor_room" />
    <description>You are in the kitchen of the living quarters. The room is dominated by a counters, stoves and ten Konigs engaged in preparing the evening meal. A robot glides into the room from the doors to the rest of the living quarters, carrying plates piled high with uneaten food. As you watch another takes fresh plates out of the room.</description>
    <alias>Living Quarters Kitchen</alias>
    <beforeenter type="script"><![CDATA[
      play sound ("LQMusic.mp3", false, true)
      msg ("<br/>Control of König initiated.")
    ]]></beforeenter>
    <onexit type="script">
      stop sound
    </onexit>
    <beforefirstenter type="script">
      msg ("König  - Online")
    </beforefirstenter>
    <exit name="Exit Living Quarters to Solar" to="Solar Array Station">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Living Quarters to Security" to="Security">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Living Quarters to Biosphere" to="Hydroponic Biosphere">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <exit name="Exit Living Quarters to Med Bay" to="Med Bay">
      <scenery type="boolean">false</scenery>
      <locked />
    </exit>
    <object name="Living Quarters Complete">
      <inherit name="editor_object" />
      <visible type="boolean">false</visible>
      <scenery />
      <displayverbs type="stringlist" />
      <inventoryverbs type="stringlist" />
      <drop type="boolean">false</drop>
    </object>
    <object name="Fridge">
      <inherit name="editor_object" />
      <inherit name="openable" />
      <feature_container />
      <look type="script">
        msg ("Two large stainless steel fridges sit at the back of the room. They, like the rest of the kitchen, completely spotless and unmarred by fingerprints and other marks of frequent use.")
        if (Fridge.isopen) {
          msg ("The fridge is almost completely full of food.")
        }
      </look>
      <openscript type="script">
        msg ("You open the fridge.")
        HelperOpenObject (Fridge)
      </openscript>
      <closescript type="script">
        msg ("As you close the fridge one of the robots moves to open the door, pushing you out of the way.")
        HelperCloseObject (Fridge)
      </closescript>
    </object>
    <object name="Delivery System">
      <inherit name="editor_object" />
      <look><![CDATA[Beside the fridges there is an empty portion of the wall. Upon closer inspection you notice a small keypad and screen.<br/><br/>This keypad is the user interface for the station’s food delivery system that you encountered earlier. If you really wanted you could request more food, but there seems to be enough for now.]]></look>
      <requestfood>You enter the command, and 30 seconds later the keypad flashes green and the entire section of the wall opens and the supplies roll onto the floor. The wall closes and returns to looking like a normal wall.</requestfood>
      <feature_usegive />
      <use type="script">
        msg ("You enter the command, and 30 seconds later the keypad flashes green and the entire section of the wall opens and the supplies roll onto the floor. The wall closes and returns to looking like a normal wall. ")
      </use>
    </object>
    <object name="Robots">
      <inherit name="editor_object" />
      <look>The robots move about the room, performing individual tasks but obviously working toward a common goal. In this case the goal is a meal which looks as though it could feed fifty crew members. The robots are the same model as the one you are currently commanding, making you think the robot had been a part of the larger collective.</look>
    </object>
    <object name="Common Room">
      <inherit name="editor_room" />
      <description><![CDATA[The living quarters is a large and relatively pleasant area. While the other rooms in the ship have been cold work environments or displays of prestige, this room’s function appears to be simple utility and comfort. <br/><br/>A couple of chairs are placed to let the occupants look out of the window. Two couches create a nook on the right side of the room couches . Behind them in the corner there is a well worn cat tree. The couches are facing towards a small television, game console and in the corner, a cabinet style record player. To either side of the entrance to the kitchen are windowed doors to the sleeping chambers.<br/><br/>]]></description>
      <firstenter type="script"><![CDATA[
        msg ("As you direct your robot through the doors into the large, comfortable room, your attention is at first only for the view at the end of the room. The entire opposite was is a window to space, made even more spectacular the swirling colour of the neighbouring nebula.<br/><br/>As you look away from the window, you notice the chess table, with two chairs centred against the wall. A man and a woman are seated at the table, though the game they once played is long forgotten. Both  look to be long dead, already becoming dried husks. The entire room is filled with crew members, sitting on the comfortable couches and chairs, and as you watch a robot brings out a blanket and places it gently over a young woman on the couch, reminiscent of how one would tuck in a child. Some sprawled across the table, surrounded by carefully placed dishes of food should they wake and want for food.")
        picture ("Living Quarters 1.jpg")
      ]]></firstenter>
      <object name="Cat Tree">
        <inherit name="editor_object" />
        <inherit name="surface" />
        <feature_container />
        <hidechildren type="boolean">false</hidechildren>
        <listchildren type="boolean">false</listchildren>
        <look type="script">
          msg ("A three-tiered cat tree covered in cheap fabric and fur.")
          if (Dead Cat.parent = Cat Tree) {
            msg ("A dead cat lies curled up on the top platform.")
          }
          else if (Got(Dead Cat)) {
            msg ("An impression is left where the cat used to lie.")
          }
        </look>
        <takedeadcat type="script">
          AddToInventory (Dead Cat)
        </takedeadcat>
        <object name="Dead Cat">
          <inherit name="editor_object" />
          <look type="string"></look>
          <take />
          <takemsg>You are now carrying a dead cat in your droid's storage cubby.</takemsg>
          <drop type="boolean">false</drop>
          <feature_usegive />
          <selfuseon type="scriptdictionary">
            <item key="Doors">
              msg ("On a whim you take a hair from the dead cat and try it on each of the DNA scanners. If someone is trapped in one of the bedrooms you might be able to save them, or at the very least find out more about what’s going on. You’ve checked nearly all of the rooms and are starting to think your efforts were pointless. Finally, one of the rooms clicks open.")
              SetTimeout (3) {
                msg ("The robot surveys the area. You see someone in the bed. A bio-scan shows no signs of life. Beside the bed is a stand with a large vase filled with flowers, and get well soon cards. Realizing that the cat was likely this crew member’s pet, you lay the cat down in the bed with them. In the room there is a mirror over a small sink as well as a small desk.")
                MakeObjectInvisible (Dead Cat)
                MoveObject (player, Sleeping Chamber)
                UnlockExit (CorridorToSC)
              }
            </item>
          </selfuseon>
        </object>
      </object>
      <object name="Set of Couches">
        <inherit name="editor_object" />
        <takemsg>A couch is far too heavy for a droid to carry around.</takemsg>
        <look type="script">
          msg ("The couches are fluffy with well placed arm rests. The perfect napping couch.")
        </look>
      </object>
      <object name="Record Player">
        <inherit name="editor_object" />
        <isplaying type="boolean">false</isplaying>
        <look type="script">
          msg ("An old record player is gathering dust. There is a translucent red 45 under the needle.")
        </look>
        <play type="script">
          if (Record Player.isplaying = False) {
            msg ("A song begins to play.")
            stop sound
            play sound ("LQRecordMusic.mp3", false, true)
            set (Record Player, "isplaying", True)
          }
          else {
            msg ("The record is already playing.")
          }
        </play>
        <stop type="script">
          if (Record Player.isplaying = True) {
            stop sound
            set (Record Player, "isplaying", False)
            msg ("The record stops playing.")
          }
          else {
            msg ("No record is playing.")
          }
        </stop>
      </object>
      <object name="Small TV">
        <inherit name="editor_object" />
        <inherit name="switchable" />
        <look>A blocky, 11" TV.</look>
        <feature_switchable />
        <switchonmsg>The roboto turns on the TV. Only static appears.</switchonmsg>
        <switchoffmsg>The TV screen once again turns black.</switchoffmsg>
      </object>
      <object name="Game Console">
        <inherit name="editor_object" />
        <inherit name="switchable" />
        <look>A well used game console. What first appeared to be a shadow was a colossal crack down the middle.</look>
        <feature_switchable />
        <switchonmsg>The power button on the console clicks, but nothing happens.</switchonmsg>
        <switchoffmsg>The power button on the console clicks, but nothing happens.</switchoffmsg>
        <onswitchon type="script">
          SwitchOff (Game Console)
        </onswitchon>
      </object>
      <exit alias="west" to="Living Quarters">
        <inherit name="westdirection" />
      </exit>
      <exit alias="north" to="Common Room">
        <inherit name="northdirection" />
        <lookonly />
        <look>This is the door to the north sleeping quarters. Through the window you can see a chaotic hallway. The doors to the individual chambers have been flung open and their occupants lay in the hallway. You cannot know why they locked themselves in.</look>
      </exit>
      <object name="Corridor">
        <inherit name="editor_room" />
        <attr name="feature_container" type="boolean">false</attr>
        <look><![CDATA[A long hallway with two rooms on either side. The nametags on the doors mark who each of the sleeping chambers belong to: M. Galligher, N. Passant, H. Pabst, and K. Anders.<br/><br/>At the end of the hall is the entrance to the AI Core.]]></look>
        <description><![CDATA[A long hallway with two rooms on either side. The nametags on the doors mark who each of the sleeping chambers belong to: M. Galligher, N. Passant, H. Pabst, and K. Anders.<br/><br/>At the end of the hall is the entrance to the AI Core.]]></description>
        <object name="Doors">
          <inherit name="editor_object" />
          <scenery />
          <attr name="feature_usegive" type="boolean">false</attr>
          <look type="script">
            msg ("You check each of the bedroom doors. They all seem to be locked. A DNA scanner is mounted to the right of each door.")
          </look>
        </object>
        <exit name="AI Entrance" alias="south" to="AI Core">
          <inherit name="southdirection" />
          <locked />
          <lockmessage>The screen above the keypad flashes “Locked, Passcode required”. You will have to find the code somewhere on the station. However, you do remember that one of the crew members who worked in security had been in charge of monitoring the AI, you had looked through his locker. And besides, you should search the living quarters more thoroughly before moving on.</lockmessage>
          <runscript />
          <script type="script">
            msg ("ENTER PASSWORD TO AI CORE:")
            get input {
              if (IsRegexMatch("Qu33n5G4m81t", LCase(result))) {
                msg ("CORRECT")
                MoveObject (player, AI Core)
              }
              else {
                msg ("ERROR: INCORRECT PASSWORD")
              }
            }
          </script>
        </exit>
        <object name="Sleeping Chamber">
          <inherit name="editor_object" />
          <look type="string"></look>
          <scenery />
          <exit alias="west" to="Corridor">
            <inherit name="westdirection" />
          </exit>
          <object name="Mirror">
            <inherit name="editor_object" />
            <look>You see a robot of the same model as those in the kitchen. It is slightly shorter than a human, and designed to look pleasing to the eye. </look>
          </object>
          <object name="Desk2">
            <inherit name="editor_object" />
            <inherit name="surface" />
            <alias>Desk</alias>
            <look>Sitting on the desk is a keycard with the name E. Passant and an access code that must open the AI Core. Beside the card are two letters: the first letter looks to be from the Chief of Security, and the other looks like an attempted reply that got no further than the TO portion. </look>
            <feature_container />
            <hidechildren />
            <object name="Letter">
              <inherit name="editor_object" />
              <look type="script"><![CDATA[
                msg ("The letter reads:<br/><br/>“TO: N. Passant<br/>FROM: K. Normandeau <br/>Look, I got your message. I know you are sick, but I really need you to look into the problems we have been having with that damn AI. You are the only one that can reason with it, and since you have gotten    sick things have started happening that we cannot explain. I am trying to quiet any rumors as best I can, but Dr. Cain’s sudden death is making people nervous. Please, I’ll carry you to the Core if I have to. <br/>Get well soon, I will come visit you in a couple of days. Enjoy the chocolates, and give Stormy the treats I sent him.”")
                SetObjectFlagOn (Check Ship Status, "Living Quarters Complete")
                UnlockExit (AI Entrance)
                checkStatus
              ]]></look>
              <read type="script"><![CDATA[
                msg ("“TO: N. Passant<br/>FROM: K. Normandeau <br/>Look, I got your message. I know you are sick, but I really need you to look into the problems we have been having with that damn AI. You are the only one that can reason with it, and since you have gotten sick things have started happening that we cannot explain. I am trying to quiet any rumors as best I can, but Dr. Cain’s sudden death is making people nervous. Please, I’ll carry you to the Core if I have to. <br/>Get well soon, I will come visit you in a couple of days. Enjoy the chocolates, and give Stormy the treats I sent him.”")
                set (Check Ship Status, "Living Quarters Complete", True)
              ]]></read>
            </object>
          </object>
        </object>
        <exit name="CorridorToSC" alias="east" to="Sleeping Chamber">
          <inherit name="eastdirection" />
          <locked />
        </exit>
        <exit alias="north" to="Common Room">
          <inherit name="northdirection" />
        </exit>
      </object>
      <exit alias="south" to="Corridor">
        <inherit name="southdirection" />
      </exit>
    </object>
    <exit alias="east" to="Common Room">
      <inherit name="eastdirection" />
    </exit>
  </object>
  <verb>
    <property>test</property>
    <pattern>test</pattern>
    <defaultexpression>"You can't test " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>plugin</property>
    <pattern>plug in</pattern>
    <defaultexpression>"You can't plug in " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>play</property>
    <pattern>play</pattern>
    <defaultexpression>"You can't play " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>stop</property>
    <pattern>stop</pattern>
    <defaultexpression>"You can't stop " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>takedeadcat</property>
    <pattern>take dead cat</pattern>
    <defaultexpression>"You can't take dead cat " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>opencabinet</property>
    <pattern>open cabinet</pattern>
    <defaultexpression>"You can't open cabinet " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>opendrawer</property>
    <pattern>open drawer</pattern>
    <defaultexpression>"You can't open drawer " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>enterpassword</property>
    <pattern>enter password</pattern>
    <defaultexpression>"You can't enter password " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>lookunder</property>
    <pattern>look under</pattern>
    <defaultexpression>"You can't look under " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>lookunderpillow</property>
    <pattern>look under pillow</pattern>
    <defaultexpression>"You can't look under pillow " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>lookunderneath</property>
    <pattern>look underneath</pattern>
    <defaultexpression>"You can't look underneath " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>print</property>
    <pattern>print</pattern>
    <defaultexpression>"You can't print " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>requestfood</property>
    <pattern>request food</pattern>
    <defaultexpression>"You can't request food " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>remove</property>
    <pattern>remove</pattern>
    <defaultexpression>"You can't remove " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>check</property>
    <pattern>check</pattern>
    <defaultexpression>"You can't check " + object.article + "."</defaultexpression>
  </verb>
  <function name="SRAccessDroids">
    get input {
      if (IsRegexMatch ("yes|y", LCase(result))) {
        msg ("Begining droid access protocols.")
        SRAccessRoom
      }
      else {
        msg ("ERROR")
        msg ("Access repair droids(y/n)?")
        SRAccessDroids
      }
    }
  </function>
  <function name="SRAccessRoom">
    msg ("Please enter the room you would like to access:")
    get input {
      if (IsRegexMatch ("solar|array|solar array", LCase(result))) {
        msg ("Access granted.")
        MoveObject (player, Solar Array Station)
      }
      else {
        msg ("ERROR CODE ORA-10461: ACCESS DENIED, SOLAR ARRAY STATION MUST BE ONLINE")
        SRAccessRoom
      }
    }
  </function>
  <function name="getStatus"><![CDATA[
    msg ("<br/>Koncovka    Status Report:<br/>")
    if (GetBoolean(Check Ship Status, "Solar Array Station Complete")) {
      if (GetBoolean(Check Ship Status, "Biosphere Complete")) {
        if (GetBoolean(Check Ship Status, "Security Complete")) {
          if (GetBoolean(Check Ship Status, "Med Bay Complete")) {
            msg ("Station Functional        - COMPLETE")
          }
          else {
            msg ("Station Functional         - Incomplete")
          }
        }
      }
    }
    if (GetBoolean(Check Ship Status, "Solar Array Station Complete")) {
      msg ("Solar Array Station        - ONLINE")
    }
    else {
      msg ("Solar Array Station        - Offline")
    }
    if (GetBoolean(Check Ship Status, "Biosphere Complete")) {
      msg ("Hydroponic Biosphere     - ONLINE")
    }
    else {
      msg ("Hydroponic Biosphere     - Offline")
    }
    if (GetBoolean(Check Ship Status, "Security Complete")) {
      msg ("Security                       - ONLINE")
    }
    else {
      msg ("Security                        - Offline")
    }
    if (GetBoolean(Check Ship Status, "Med Bay Complete")) {
      msg ("Medical Bay                - ONLINE")
    }
    else {
      msg ("Medical Bay                - Offline")
    }
    if (GetBoolean(Check Ship Status, "Solar Array Station Complete")) {
      if (GetBoolean(Check Ship Status, "Biosphere Complete")) {
        if (GetBoolean(Check Ship Status, "Security Complete")) {
          if (GetBoolean(Check Ship Status, "Med Bay Complete")) {
            msg ("<br/>ACCESS TO LIVING QUARTERS NOW GRANTED")
          }
        }
      }
    }
  ]]></function>
  <function name="SecPuz1" parameters="remaining" type="boolean">
    if (remaining = 0) {
      msg ("YOU HAVE RUN OUT OF BYPASS ATTEMPTS. GOODBYE.")
    }
    else {
      msg ("PLEASE ENTER LEVEL 1 SECURITY BYPASS.")
      msg ("REMAINING ATTEMPTS:" + remaining)
      msg ("PASSWORD HINT: tetsrur")
      msg ("ENTER BYPASS CODE:")
      get input {
        if (IsRegexMatch("turrets", LCase(result))) {
          msg ("CORRECT")
          SecPuz2 (3)
        }
        else {
          msg ("ERROR. INCORRECT BYPASS CODE.")
          SecPuz1 (remaining-1)
        }
      }
    }
  </function>
  <function name="SecPuz2" parameters="remaining">
    if (remaining = 0) {
      msg ("YOU HAVE RUN OUT OF BYPASS ATTEMPTS. GOODBYE.")
    }
    else {
      msg ("PLEASE ENTER LEVEL 2 SECURITY BYPASS.")
      msg ("REMAINING ATTEMPTS:" + remaining)
      msg ("PASSWORD HINT: goniel")
      msg ("ENTER BYPASS CODE:")
      get input {
        if (IsRegexMatch("legion", LCase(result))) {
          msg ("CORRECT")
          SecPuz3 (3)
        }
        else {
          msg ("ERROR. INCORRECT BYPASS CODE.")
          SecPuz2 (remaining-1)
        }
      }
    }
  </function>
  <function name="SecPuz3" parameters="remaining">
    if (remaining = 0) {
      msg ("YOU HAVE RUN OUT OF BYPASS ATTEMPTS. GOODBYE.")
    }
    else {
      msg ("PLEASE ENTER LEVEL 3 SECURITY BYPASS.")
      msg ("REMAINING ATTEMPTS:" + remaining)
      msg ("PASSWORD HINT: tastuanor")
      msg ("ENTER BYPASS CODE:")
      get input {
        if (IsRegexMatch("astronaut", LCase(result))) {
          msg ("CORRECT. TURRET DISABLED.")
          set (Security, "turret_online", False)
          UnlockExit (SecurityToSecOffice)
        }
        else {
          msg ("ERROR. INCORRECT BYPASS CODE.")
          SecPuz3 (remaining-1)
        }
      }
    }
  </function>
  <function name="unlockExits">
    UnlockExit (Exit Biosphere to Med Bay)
    UnlockExit (Exit Biosphere to Security)
    UnlockExit (Exit Biosphere to Solar)
    UnlockExit (Exit Living Quarters to Biosphere)
    UnlockExit (Exit Living Quarters to Med Bay)
    UnlockExit (Exit Living Quarters to Security)
    UnlockExit (Exit Living Quarters to Solar)
    UnlockExit (Exit Med Bay to Biosphere)
    UnlockExit (Exit Med Bay to Security)
    UnlockExit (Exit Med Bay to Solar)
    UnlockExit (Exit Security to Biosphere)
    UnlockExit (Exit Security to Med Bay)
    UnlockExit (Exit Security to Solar)
    UnlockExit (Exit Solar to Biosphere)
    UnlockExit (Exit Solar to Med Bay)
    UnlockExit (Exit Solar to security)
  </function>
  <function name="SecDrawerPuz" parameters="remaining">
    if (remaining = 0) {
      msg ("YOU HAVE RUN OUT OF BYPASS ATTEMPTS. GOODBYE.")
    }
    else {
      msg ("PLEASE ENTER LEVEL 1 SECURITY BYPASS.")
      msg ("REMAINING ATTEMPTS:" + remaining)
      msg ("PASSWORD HINT: ddegwin")
      msg ("ENTER BYPASS CODE:")
      get input {
        if (IsRegexMatch("wedding", LCase(result))) {
          msg ("CORRECT")
          msg ("Inside you find a personal diary with a black leather cover. You open the diary to the last page. It reads \"I have been retracing Kirk's steps over the last couple of days, and I think I know what killed him. It was the AI. Security Chief Normandeau does not believe me, she even told me to stop digging. But I can't, not now that my best friend is dead.\"")
        }
        else {
          msg ("ERROR. INCORRECT BYPASS CODE.")
          SecDrawerPuz (remaining-1)
        }
      }
    }
  </function>
  <function name="checkStatus"><![CDATA[
    if (GetBoolean(Check Ship Status, "Solar Array Station Complete")) {
      if (GetBoolean(Check Ship Status, "Biosphere Complete")) {
        if (GetBoolean(Check Ship Status, "Security Complete")) {
          if (GetBoolean(Check Ship Status, "Med Bay Complete")) {
            UnlockExit (Exit Biosphere to Living Quarters)
            UnlockExit (Exit Med Bay to Living Quarters)
            UnlockExit (Exit Security to Living Quarters)
            UnlockExit (Exit Solar to Living Quarters)
            UnlockExit (Exit Living Quarters to Biosphere)
            UnlockExit (Exit Living Quarters to Med Bay)
            UnlockExit (Exit Living Quarters to Security)
            UnlockExit (Exit Living Quarters to Solar)
            msg ("<br/>Checking ships status<br/>...")
            SetTimeout (1) {
            }
            getStatus
            SetTimeout (1) {
            }
            msg ("Living Quarters now accessible. ")
          }
        }
      }
    }
  ]]></function>
</asl>